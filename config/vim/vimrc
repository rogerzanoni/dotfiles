if !isdirectory(expand("~/.vim/bundle/vundle/"))
  silent !echo "Installing Vundle..."
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
endif

set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle "gmarik/vundle"

" Signify (vcs info)
Bundle 'mhinz/vim-signify'

" Easy motion to navigate with a few keystrokes
Bundle 'EasyMotion'

" Syntax check
Bundle 'Syntastic'

" Change surroundings
Bundle 'surround.vim'

" Navigate undo history
Bundle 'Gundo'

" Colortheme
"Bundle 'darkBlue'
Bundle 'wombat256.vim'

" TagBar
Bundle 'Tagbar'

" unimpaired.vim : Pairs of handy bracket mappings
Bundle 'unimpaired.vim'

" Autocomplete
Bundle 'Shougo/neocomplcache.vim'
Bundle 'Shougo/neosnippet.vim'

" Alternate files quickly
Bundle 'a.vim'

"Easy tags
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-easytags'

" Unite
Bundle 'Shougo/unite.vim'
Bundle 'Shougo/unite-outline'
Bundle 'Shougo/unite-help'
Bundle 'tsukkee/unite-tag'

" Vimproc
Bundle 'Shougo/vimproc.vim'
" After install vimproc bundle, go to its directory and run make

" Ack search
Bundle 'ack.vim'

" Haxe support
Bundle 'jdonaldson/vaxe'

" Smarter status line
Bundle 'bling/vim-airline'

" Commenting helper
Bundle 'The-NERD-Commenter'

" Vim Fugitive
Bundle 'fugitive.vim'

" Expand region
Bundle 'terryma/vim-expand-region'

" Smart closing for brackets, quotes, parenthesis, etc
Bundle 'delimitMate.vim'

" Add tab completion inside "/" search
Bundle 'SearchComplete'

" Fold/Unfold matching text in searches
Bundle 'searchfold.vim'

" Smart(er) search and replace
Bundle 'abolish.vim'

" CamelCase motions
Bundle 'camelcasemotion'

" Colorschemes
Bundle 'flazz/vim-colorschemes'

filetype plugin on
filetype indent on

" Color theme
set bg=dark
colorscheme oceanblack256

" Enable the fucking mouse selection
set mouse=a

"Boy, this trick saves lifes
nnoremap ; :

" Clean highlighted searches
nmap <silent> ,/ :nohlsearch<CR>

" Fast movement through splits
map <up> <c-w>k
map <down> <c-w>j
map <left> <c-w>h
map <right> <c-w>l

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Gundo config
nnoremap <F5> :GundoToggle<CR>

" Tagbar congig
nmap <F9> :TagbarToggle<CR>
let g:tagbar_left = 1
let g:tagbar_width = 40
let g:tagbar_show_visibility = 1
let g:tagbar_autoshowtag = 1

" NeoCompl config
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
" Auto select best matches
let g:neocomplcache_enable_auto_select = 1
" Fuzzy completion
let g:neocomplcache_enable_fuzzy_completion = 1
" Close popup by <Space>
inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() : "\<Space>"
" disablea automatic popup
let g:neocomplcache_disable_auto_complete = 1

"Airline
let g:airline_powerline_fonts = 1

"TAB popup

" EasyTags config
let g:easytags_file = '~/.vim/tags'
let g:easytags_autorecurse = 0
let g:easytags_include_members = 1
let g:easytags_resolve_links = 1
let g:easytags_updatetime_warn = 0 " Disable ctags updatetime warnings
let g:easytags_auto_highlight = 0

set tags=./.tags;
let g:easytags_dynamic_files = 2

let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Disable MiniBufExplorer
let loaded_minibufexplorer = 1

let mapleader = ","
let g:mapleader = ","

" Number of undo levels
set undolevels=1000

" Text pasting madness
set pastetoggle=<F10>
inoremap <C-v> <F10><C-r>+<F10>

" Unite Config

" Use the fuzzy matcher for everything
call unite#filters#matcher_default#use(['matcher_fuzzy'])
" Sorter
call unite#filters#sorter_default#use(['sorter_rank'])

" Search for files like CtrlP or CommandT
nnoremap <C-p> :Unite -start-insert file_rec/async<cr>
" Search for files using grep
nnoremap <leader>/ :Unite grep:.<cr>
" Fucking awesome yank ring
let g:unite_source_history_yank_enable = 1
nnoremap <leader>y :Unite history/yank<cr>
" Switch buffers
nnoremap <leader>s :Unite -quick-match buffer<cr>
" Use leader-ss to search word under cursor in the current directory
nnoremap <leader>ss :Unite grep:.::<C-r><C-w><CR>
" Quick buffer and MRU
nnoremap <silent> <leader>m :<C-u>Unite -start-insert -buffer-name=buffers buffer file_mru<CR>
" Quick outline
nnoremap <silent> <leader>o :<C-u>Unite -buffer-name=outline -vertical outline<CR>
" Quick registers
nnoremap <silent> <leader>r :<C-u>Unite -buffer-name=register register<CR>
" General fuzzy search
nnoremap <silent> <leader><leader> :<C-u>Unite -start-insert
      \ -buffer-name=files buffer file_mru bookmark file_rec/async<CR>
" Quick sources
nnoremap <silent> <leader>a :<C-u>Unite -start-insert -buffer-name=sources source<CR>
" Quick snippet
nnoremap <silent> <leader>p :<C-u>Unite -start-insert -buffer-name=snippets snippet<CR>
" Quick help
nnoremap <silent> <leader>h :<C-u>Unite -start-insert -buffer-name=help help<CR>
" Quick line using the word under cursor
nnoremap <silent> <leader>l :<C-u>UniteWithCursorWord -buffer-name=search_file line<CR>
" Quick find
nnoremap <silent> <leader>f :<C-u>Unite -buffer-name=find find:.<CR>
" Quick commands
nnoremap <silent> <leader>c :<C-u>Unite -start-insert -buffer-name=commands command<CR>
" Tags
nnoremap <silent> <leader>t :<C-u>Unite -start-insert -auto-resize -buffer-name=tags tag tag/file<cr>
" Tags generated by neocomplcache
nnoremap <silent> <leader>i :<C-u>Unite -start-insert -auto-resize -buffer-name=tags tag tag/include<cr>
" Split rules
let g:unite_split_rule = "botright"
" Force to open statusline win instead of a new buffer
let g:unite_force_overwrite_statusline = 0

"Sy config
let g:signify_mapping_next_hunk = ']c'
let g:signify_mapping_prev_hunk = '[c'

" File opening bindings like CtrlP
autocmd FileType unite call s:unite_settings()

function! s:unite_settings()
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  imap <silent><buffer><expr> <C-x> unite#do_action('split')
  imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')

  nmap <buffer> <ESC> <Plug>(unite_exit)
endfunction

" Disable Background Color Erase
set t_ut=

set history=500

set cursorline

" Set to auto read when a file is changed from the outside
set autoread

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set listchars=tab:▶·,trail:·
set list

" Show status line
set laststatus=2

" Enable syntax highlighting
syntax enable

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

set t_Co=256

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

set hidden

set wildmenu
"set wildmode=list:longest

set number

highlight clear SignColumn

set clipboard=unnamedplus

autocmd CursorHold * call Idle()
autocmd CursorMoved * call Moved()

function! Idle()
    set number
endfunction

function! Moved()
    set relativenumber
endfunction
