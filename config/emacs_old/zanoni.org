This is my personal information:

#+begin_src emacs-lisp
  (setq user-full-name "Roger Zanoni"
        user-mail-address "rogerzanoni@gmail.com")
#+end_src

Line numbers everywhere:

#+begin_src emacs-lisp
(global-linum-mode 1)
#+end_src

Enable column-number mode

#+begin_src emacs-lisp
(column-number-mode 1)
#+end_src

Default tabs settings:

No tabs, spaces instead:

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

Default tab width:

#+begin_src emacs-lisp
(setq tab-width 4)
#+end_src

Electric indent mode

#+begin_src emacs-lisp
(electric-indent-mode +1)
#+end_src

Don't confirm nonexistent file creation:

#+begin_src emacs-lisp
(setq confirm-nonexistent-file-or-buffer nil)
#+end_src

Set the default font:

#+begin_src emacs-lisp
(when (member "GohuFont" (font-family-list))
  (set-face-attribute 'default nil :font "GohuFont-14"))
#+end_src

Makes emacs play well with X:

#+begin_src emacs-lisp
(setq x-select-enable-clipboard t)
(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)
#+end_src

Set line size:

#+begin_src emacs-lisp
(setq fill-column 80)
#+end_src

Sentences don't need 2 spaces to end:

#+begin_src emacs-lisp
(set-default 'sentence-end-double-space nil)
#+end_src

Enable some commands I use:

#+begin_src emacs-lisp
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
#+end_src

Smooth scroll:

#+begin_src emacs-lisp
(setq scroll-step 1 scroll-conservatively 10000)
#+end_src

Delete selection when start typing

#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

These are some of my programming styles configurations that survived some emacs configuration changes:

#+begin_src emacs-lisp
(defun c-kr-style ()
  "C mode"
  (interactive)
  (c-set-style "K&R")
  (setq-default indent-tabs-mode t)
  (setq c-syntactic-indentation nil)
  (setq tab-width 4)
  (setq c-basic-offset 4))

(defun c-kernel-style ()
  "C kernel mode"
  (interactive)
  (c-set-style "linux")
  (setq-default indent-tabs-mode t)
  (setq c-syntactic-indentation nil)
  (setq tab-width 8)
  (setq c-basic-offset 8))

(defun cpp-style ()
  "Cpp mode"
  (interactive)
  (c-set-style "stroustrup")
  (setq-default indent-tabs-mode nil)
  (setq c-syntactic-indentation nil)
  (setq tab-width 4)
  (setq c-basic-offset 4))

(defun js2-style ()
   (setq tab-width 4))

(add-hook 'c++-mode-hook 'cpp-style)
(add-hook 'c-mode-hook 'c-kernel-style)
(add-hook 'js2-mode-hook 'js2-style)
#+end_src

package-install helper copied from Sacha's configuration:

#+begin_src emacs-lisp
(defun zanoni/package-install (package &optional repository)
  "Install PACKAGE if it has not yet been installed.
If REPOSITORY is specified, use that."
  (unless (package-installed-p package)
    (let ((package-archives (if repository
                                (list (assoc repository package-archives))
                              package-archives)))
    (package-install package))))
#+end_src

Now, install use-package:

#+begin_src emacs-lisp
(zanoni/package-install 'use-package)
(require 'use-package)
#+end_src

Let's speed up things by byte-compiling my init files and the cloned repositories:

#+begin_src emacs-lisp
(defun zanoni/byte-recompile ()
  (interactive)
  (byte-recompile-directory "~/.emacs.d" 0)
  (byte-recompile-directory "~/.elisp" 0))
#+end_src

I used to always disable backups, but let's try using a directory for it instead:

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

Always disabled auto-saves too, and lost a lot of stuff. I'll give this a try too:

#+begin_src emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

Awesome idea from http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html - save all the history
to always be able to redo your commands when you need. A just changed it to use a directory in my dropbox folder, so I can sync
my history at any place.

#+begin_src emacs-lisp
(setq savehist-file "~/Dropbox/emacs/savehist")
(savehist-mode +1)
(setq savehist-save-minibuffer-history +1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+end_src

Disable all the stuff I don't want to see in emacs:

#+begin_src emacs-lisp
(tooltip-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
#+end_src

Install and initialize helm - copying Sacha's helm initialization and adding my tweaks:

#+begin_src emacs-lisp
(zanoni/package-install 'helm)
(zanoni/package-install 'helm-cmd-t)

(require 'helm-cmd-t)

(use-package helm
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 10)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-transformer-show-only-basename nil
          helm-ff-skip-boring-files t)
    (helm-mode))
  :config
  (progn
    ;; I don't like the way switch-to-buffer uses history, since
    ;; that confuses me when it comes to buffers I've already
    ;; killed. Let's use ido instead.
    (add-to-list 'helm-completing-read-handlers-alist '(switch-to-buffer . ido)))
  :bind (("C-c h" . helm-mini)))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally
#+end_src

I wasn't aware of this smart-mode-line package, I should tweak this a little in the future:

#+begin_src emacs-lisp
(zanoni/package-install 'smart-mode-line)

(use-package smart-mode-line
  :init
  (progn
  (setq-default
   mode-line-format
   '("%e"
     mode-line-front-space
     mode-line-mule-info
     mode-line-client
     mode-line-modified
     mode-line-remote
     mode-line-frame-identification
     mode-line-buffer-identification
     "   "
     mode-line-position
     (vc-mode vc-mode)
     "  "
     mode-line-modes
     mode-line-misc-info
     mode-line-end-spaces))
     (setq sml/no-confirm-load-theme t)
     (sml/setup)))
#+end_src

Who have time to type "yes" or "no"?

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Install and init undo-tree:

#+begin_src emacs-lisp
(use-package undo-tree
  :init
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))
#+end_src

TODO: Add guide-key after configuring emacs-evil

UTF-8 config:

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

Sometimes I like to give more useful functions for default keys than tje original funcion. I liked the
search functions I've found in Sacha's configuration, let's use them in page-up and page-down keys:

#+begin_src emacs-lisp
(defun zanoni/search-word-backward ()
  "Find the previous occurrence of the current word."
  (interactive)
  (let ((cur (point)))
    (skip-syntax-backward "w_")
    (goto-char
     (if (re-search-backward (concat "\\_<" (current-word) "\\_>") nil t)
         (match-beginning 0)
       cur))))

(defun zanoni/search-word-forward ()
  "Find the next occurrence of the current word."
  (interactive)
  (let ((cur (point)))
    (skip-syntax-forward "w_")
    (goto-char
     (if (re-search-forward (concat "\\_<" (current-word) "\\_>") nil t)
         (match-beginning 0)
       cur))))

(global-set-key '[prior] 'zanoni/search-word-backward)
(global-set-key '[next] 'zanoni/search-word-forward)
#+end_src

Browse-kill-ring

#+begin_src emacs-lisp
(zanoni/package-install 'browse-kill-ring)
(use-package browse-kill-ring
  :init
  (progn
    (browse-kill-ring-default-keybindings) ;; M-y
    (setq browse-kill-ring-quit-action 'save-and-restore)))
#+end_src

TODO: test Smartscan mode

Recentf mode:

#+begin_src emacs-lisp
(require 'recentf)
(setq recentf-max-saved-items 200
      recentf-max-menu-items 15)
(recentf-mode 1)
#+end_src

Rainbow delimiters:

#+begin_src emacs-lisp
(zanoni/package-install 'rainbow-delimiters)

(use-package rainbow-delimiters
  :init
  (progn
    (add-hook 'c-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'c++-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'python 'rainbow-delimiters-mode)))

#+end_src

Rainbow identifiers - let's test this with my most used languages:

#+begin_src emacs-lisp
(zanoni/package-install 'rainbow-identifiers)

(use-package rainbow-identifiers
  :init
  (progn
    (add-hook 'c-mode-hook 'rainbow-identifiers-mode)
    (add-hook 'c++-mode-hook 'rainbow-identifiers-mode)
    (add-hook 'python 'rainbow-identifiers-mode)))
#+end_src

Theme: Cyberpunk

#+begin_src emacs-lisp
(zanoni/package-install 'cyberpunk-theme)
(load-theme 'cyberpunk t)
#+end_src

CMake mode:

#+begin_src emacs-lisp
(zanoni/package-install 'cyberpunk-theme)

(use-package cmake-mode
  :init
  (progn
    (setq auto-mode-alist
          (append '(("CMakeLists\\.txt\\'" . cmake-mode)
                    ("\\.cmake\\'" . cmake-mode))
                  auto-mode-alist))))
#+end_src

Javascript: Because nobody's perfect

#+begin_src emacs-lisp
(zanoni/package-install 'js2-mode)

(use-package js2-mode
  :init
  (progn
    (add-to-list 'auto-mode-alist '("\\.js" . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.qml" . js2-mode))
    (add-hook 'js2-mode-hook '(lambda ()
              (setq tab-width 4)))))
#+end_src

Paren configuration:

#+begin_src emacs-lisp
(use-package paren
  :init
    (show-paren-mode t))
#+end_src

My whitespace display configuration:

#+begin_src emacs-lisp
(use-package whitespace
  :init
  (progn
    (setq-default indicate-empty-lines t)
    (setq-default show-trailing-whitespace t)
    (setq whitespace-style '(tabs tab-mark))
    (setq whitespace-display-mappings
        '(
          (space-mark 32 [183] [46])
          (space-mark 160 [164] [95])
          (space-mark 2208 [2212] [95])
          (space-mark 2336 [2340] [95])
          (space-mark 3616 [3620] [95])
          (space-mark 3872 [3876] [95])
          (newline-mark 10 [182 10])
          (tab-mark 9 [9702 9] [92 9])))
	  (global-whitespace-mode t)))
#+end_src

This is a copy of Sacha's split functions, I'll use them in my keybindings settings:

#+begin_src emacs-lisp
(defun zanoni/vsplit-last-buffer (prefix)
  "Split the window vertically and display the previous buffer."
  (interactive "p")
  (split-window-vertically)
  (other-window 1 nil)
  (balance-windows)
  (unless prefix
    (switch-to-next-buffer)))

(defun zanoni/hsplit-last-buffer (prefix)
  "Split the window horizontally and display the previous buffer."
  (interactive "p")
  (split-window-horizontally)
  (other-window 1 nil)
  (balance-windows)
  (unless prefix (switch-to-next-buffer)))
#+end_src

Expand region:

#+begin_src emacs-lisp
(zanoni/package-install 'expand-region)

(use-package expand-region
  :bind
  (("C-=" . er/expand-region)
   ("C--" . er/contract-region)))
#+end_src

Quickrun:

#+begin_src emacs-lisp
(zanoni/package-install 'quickrun)

(use-package quickrun
  :bind
  (("<f5>" . quickrun-compile-only)
   ("<f6>" . quickrun)
   ("<f7>" . quickrun-with-arg)))
#+end_src

The True Believers would be pissed, but I've used emacs and vi for years, and I can't live without a modal editor. So... evil-mode:

#+begin_src emacs-lisp
(zanoni/package-install 'evil)
(zanoni/package-install 'evil-leader)
(require 'evil)
(require 'evil-leader)
(evil-mode 1)
(global-evil-leader-mode)
;; workaround to make evil-mode work with electric indent mode
;; see https://bitbucket.org/lyro/evil/issue/385/electric-indent-mode-does-not-work-in-244
(define-key evil-insert-state-map [remap newline] 'newline)
(define-key evil-insert-state-map [remap newline-and-indent] 'newline-and-indent)
#+end_src

Makes ESC cancel things everywhere:

#+begin_src emacs-lisp
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+end_src

Global keybindings:

#+begin_src emacs-lisp
(global-set-key (kbd "<f1>") 'c-kr-style)
(global-set-key (kbd "<f2>") 'c-kernel-style)
(global-set-key (kbd "<f10>") 'start-kbd-macro)
(global-set-key (kbd "<f11>") 'end-kbd-macro)
(global-set-key (kbd "<f12>") 'call-last-kbd-macro)
#+end_src

Evil-leader keybindings:

#+begin_src emacs-lisp
(evil-leader/set-leader ",")

(evil-leader/set-key
  "p" 'helm-for-files
  "f" 'helm-find-files
  "b" 'helm-buffers-list
  "d" 'delete-trailing-whitespace
  "t" 'untabify
  "h" 'zanoni/vsplit-last-buffer
  "r" 'recentf-open-files
  "v" 'zanoni/hsplit-last-buffer
  "is" 'ff-find-other-file
  "a" 'mark-whole-buffer)
#+end_src

Evil normal-mode keybindings:

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "C-r") 'redo)
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-normal-state-map (kbd "C-p") 'helm-cmd-t)
(define-key evil-normal-state-map (kbd ";") 'evil-ex)
(define-key evil-normal-state-map (kbd "<left>") 'windmove-left)
(define-key evil-normal-state-map (kbd "<right>") 'windmove-right)
(define-key evil-normal-state-map (kbd "<up>") 'windmove-up)
(define-key evil-normal-state-map (kbd "<down>") 'windmove-down)
#+end_src

Ace jump mode:

#+begin_src emacs-lisp
(zanoni/package-install 'ace-jump-mode)
(require 'ace-jump-mode)

(evil-leader/set-key
  "," 'evil-ace-jump-char-mode
  "l" 'ace-jump-line-mode)
#+end_src

Autocomplete:

#+begin_src emacs-lisp
(zanoni/package-install 'auto-complete)
(zanoni/package-install 'fuzzy)
(require 'fuzzy)
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)
(setq ac-auto-start nil)
(ac-set-trigger-key "TAB")
#+end_src

VCS diff highlighting:

#+begin_src emacs-lisp
(zanoni/package-install 'git-gutter-fringe+)
(require 'git-gutter-fringe+)
(global-git-gutter+-mode t)

(define-key evil-normal-state-map (kbd "]c") 'git-gutter+-next-hunk)
(define-key evil-normal-state-map (kbd "[c") 'git-gutter+-previous-hunk)
#+end_src

Highlight the current line

#+begin_src emacs-lisp
(global-hl-line-mode +1)
#+end_src

mu4e setup.

#+begin_src emacs-lisp
(require 'mu4e)
(require 'smtpmail)

(setq mu4e-drafts-folder "/[Gmail].Rascunhos")
(setq mu4e-sent-folder   "/[Gmail].E-mails enviados")
(setq mu4e-trash-folder  "/[Gmail].Lixeira")

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; setup some handy shortcuts
;; you can quickly switch to your Inbox -- press ``ji''
;; then, when you want archive some messages, move them to
;; the 'All Mail' folder by pressing ``ma''.

(setq mu4e-maildir-shortcuts
    '( ("/INBOX" . ?i)
       ("/[Gmail].E-mails enviados" . ?s)
       ("/[Gmail].Lixeira" . ?t)
       ("/[Gmail].All Mail" . ?a)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "offlineimap")

;; something about ourselves
(setq
   user-mail-address "rogerzanonidev@gmail.com"
   user-full-name  "Roger Zanoni"
   mu4e-compose-signature
      "Roger Zanoni")

(require 'smtpmail)
(setq message-send-mail-function 'smtpmail-send-it
    send-mail-function 'smtpmail-send-it
    smtpmail-stream-type 'starttls
    smtpmail-default-smtp-server "smtp.gmail.com"
    smtpmail-smtp-server "smtp.gmail.com"
    smtpmail-smtp-service 587)

;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)
#+end_src

Gtags support

#+begin_src emacs-lisp
(setq helm-gtags-prefix-key "\C-ct")

(zanoni/package-install 'helm-gtags)
(require 'helm-gtags)

(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-suggested-key-mapping t)

;; Enable helm-gtags-mode in Dired so you can jump to any tag
;; when navigate project tree with Dired
(add-hook 'dired-mode-hook 'helm-gtags-mode)

;; Enable helm-gtags-mode in Eshell for the same reason as above
(add-hook 'eshell-mode-hook 'helm-gtags-mode)

;; Enable helm-gtags-mode in languages that GNU Global supports
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(add-hook 'java-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

;; key bindings
(define-key evil-normal-state-map (kbd ",1") 'helm-semantic-or-imenu)
(define-key evil-normal-state-map (kbd ",2") 'helm-gtags-dwim)
(define-key evil-normal-state-map (kbd ",3") 'helm-gtags-select)

(define-key evil-normal-state-map (kbd ",w") 'helm-gtags-previous-history)
(define-key evil-normal-state-map (kbd ",s") 'helm-gtags-next-history)
(define-key evil-normal-state-map (kbd ",o") 'helm-occur)
(define-key evil-normal-state-map (kbd ",u") 'helm-gtags-update-tags)

#+end_src

Cuda mode

#+begin_src emacs-lisp
(zanoni/package-install 'cuda-mode)
(add-to-list 'auto-mode-alist '("\\.cu\\'" . cuda-mode))
#+end_src

Magit mode
Just because I like the magit-blame-mode :)

#+begin_src emacs-lisp
(zanoni/package-install 'magit)
(setq magit-auto-revert-mode nil)
(setq magit-last-seen-setup-instructions "1.4.0")
(require 'magit)
#+end_src

Rust mode

#+begin_src emacs-lisp
(zanoni/package-install 'rust-mode)
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
(require 'magit)
#+end_src

Emacs speaks statistics

#+begin_src emacs-lisp
(zanoni/package-install 'ess)
(require 'ess-site)
#+end_src

Gist.el

#+begin_src emacs-lisp
(zanoni/package-install 'gist)
(require 'gist)
#+end_src

Git time machine

#+begin_src emacs-lisp
(zanoni/package-install 'git-timemachine)
(require 'git-timemachine)
#+end_src
